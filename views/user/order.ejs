<%- include("../../views/partials/user/header") %>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script> 
<style>
  .download-invoice-button {
    background-color: #0a0a0a; 
    color: white;
    border: none;
    padding: 2px 10px;
    font-size: 14px;
    cursor: pointer;
  
    transition: background-color 0.3s ease;
    
}

</style>
<div class="container">
    <h3>YOUR ORDERS</h3>

    <% if (orders && orders.length > 0) { %>
      <% orders.forEach(order => { %>
        <div class="order-card">
          <div class="order-header">
            <!-- Display full Order ID with reduced font size -->
            <h4>ORDER ID: <span class="order-id"><%= order.orderId %></span></h4>
            <p>Order Date: <%= new Date(order.invoiceDate).toLocaleDateString() %></p>
            <p>Total Price: ₹<%= order.totalPrice.toFixed(2) %></p>
            <p>Discount Applied: ₹<%= order.discount %></p>
            <% if (order.couponApplied) { %>
              <p>Coupon Applied: ₹<%= order.couponApplied.couponAmount %></p>
            <% } else { %>
              <p>Coupon Applied: ₹0</p>
            <% } %>

            <!-- Overall order status -->
            <p class="overall-status">
              Overall Status: 
              <% let statuses = order.Ordereditems.map(item => item.status); %>
              <% let priority = { 'Pending': 1, 'Placed': 2, 'Processing': 3, 'Shipped': 4, 'Out for Delivery': 5, 'Delivered': 6, 'Cancelled': 0 }; %>
              <% let maxStatus = statuses.reduce((max, status) => priority[status] > priority[max] ? status : max, statuses[0]); %>
              <span class="status-<%= maxStatus.toLowerCase().replace(/\s+/g, '-') %>"><%= maxStatus %></span>
            </p>
            <p>Payment Status: 
              <% if (order.paymentStatus === 'Failed') { %>
                <span class="status-failed" style="color: red; font-weight: bold;">Failed</span>
               
                <button class="retry-button" onclick="retryPayment('<%= order._id %>', <%= order.totalPrice %>)">Retry Payment</button>
  
              <% } else { %>
                <span class="status-<%= order.paymentStatus.toLowerCase() %>" style="color: rgb(10, 109, 25); font-weight: bold;"><%= order.paymentStatus %></span>
              <% } %>
            </p>
          </div>
         
          <div class="ordered-items">
            <% order.Ordereditems.forEach(item => { %>
              <div class="item-card">
                <!-- Display product image and name -->
                <div class="product-info">
                  <% if (item.images && item.images && item.images.length > 0) { %>
                    <img src="/uploads/product-images/<%= item.images[0] %>" alt="<%= item.name %>" class="product-image">
                  <% } else { %>
                    <img src="/images/default-product.jpg" alt="Default Image" class="product-image">
                  <% } %>
                  <h3><%= item.name || 'Product Name Unavailable' %></h3>
                </div>
                
                <p>Quantity: <%= item.quantity %></p>
                
                <p>Total Price Before Discount: ₹<%= item.totalPrice.toFixed(2) %></p>
                <p>Discount Price: ₹<%= item.discountPrice.toFixed(2) %></p>
                <p>Total Price : ₹<%= item.price.toFixed(2) %></p>
                <p>
                  Status: 
                  <span class="status-<%= item.status.toLowerCase().replace(/\s+/g, '-') %>">
                    <%= item.status %>
                  </span>
                </p>
               
               
                

                <p>
                  <% if (['Pending', 'Processing', 'Placed', 'Shipped', 'Out for Delivery'].includes(item.status) && order.paymentStatus !== 'Failed') { %>
                    <button class="cancel-button" onclick="cancelOrder('<%= order._id %>', '<%= item.product._id %>')">
                      Cancel
                    </button>
                  <% } else if (['Delivered'].includes(item.status)) { %>
                    <button class="return-button" onclick="returnOrder('<%= order._id %>', '<%= item.product._id %>')">Return</button>
                    <button class="download-invoice-button" onclick="downloadInvoice('<%= order._id %>', '<%= item.product._id %>')">
                      Download Invoice
                    </button>
                  <% } %>
                </p>
                
              </div>
            <% }) %>
          </div>
        </div>
        <hr>
      <% }) %>
    <% } else { %>
      <p>You have no orders.</p>
    <% } %>
    
</div>

<%- include("../../views/partials/user/footer") %>

<script>
function cancelOrder(orderId, productId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "This will cancel the order.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: '/orders/cancel',
                method: 'POST',
                data: { orderId: orderId, productId: productId },
                success: (response) => {
                    if (response.success) {
                        Swal.fire('Cancelled', response.message, 'success');
                        location.reload(); 
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: (jqXHR) => {
                    const message = jqXHR.responseJSON?.message || 'Failed to cancel the order';
                    Swal.fire('Error', message, 'error');
                }
            });
        }
    });
}

function returnOrder(orderId, productId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "This will Return the order.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, Return it!',
        cancelButtonText: 'No, keep it'
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: '/orders/return',
                method: 'POST',
                data: { orderId: orderId, productId: productId },
                success: (response) => {
                    if (response.success) {
                        Swal.fire('Returned', response.message, 'success');
                        location.reload(); 
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                },
                error: (jqXHR) => {
                    const message = jqXHR.responseJSON?.message || 'Failed to return the order';
                    Swal.fire('Error', message, 'error');
                }
            });
        }
    });
}

function downloadInvoice(orderId, productId) {
    const url = `/orders/invoice/${orderId}/${productId}`;
    window.open(url, '_blank');
}

</script>

<style>
  .order-card {
    border: 1px solid #ccc;
    padding: 20px;
   
    margin-bottom: 20px;
    background-color: #f9f9f9;
  }

  .order-header {
    margin-bottom: 10px;
  }

  .order-id {
    font-size: 0.85em;
    color: #555;
  }
  .cancel-button {
    background-color: #111111; 
    color: white; 
    border: none;
    padding: 2px 10px;
    
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}
.retry-button{
    background-color: #111111; 
    color: white; 
    border: none;
    padding: 2px 10px;
    margin-top: 10px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}
.return-button {
    background-color: #111111; 
    color: white; 
    border: none;
    padding: 2px 10px;
    
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
}


  .ordered-items {
    display: flex;
    flex-wrap: wrap;
  }

  .item-card {
    border: 1px solid #ddd;
    padding: 10px;
    margin: 10px;

    background-color: #fff;
    flex: 1 1 calc(50% - 20px);
    max-width: 300px;
  }

  .product-info {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
  }

  .product-image {
    width: 50px;
    height: 50px;
    object-fit: cover;
    border-radius: 4px;
  }

  .item-card h3 {
    margin: 0;
    font-size: 1.1em;
  }

  .product-status span,
  .overall-status span {
    font-weight: bold;
    padding: 3px 6px;
   
  }

  .status-pending {
  color: #d8945c;
    
  }

  .status-processing {
    color: #b0f1ea;
  }

  .status-shipped {
    color: #8fd7f3;
  }
  .status-returned {
    color: #9c567f;
  }
  .status-delivered {
   color: #28c263;
  }

  .status-placed {
    color: #b9dcfc; 
  }

  .status-out-for-delivery {
    color: #535a63;
  }

  .status-cancelled {
    color: #bb2116;
  }

  .status-default {
   color: #808080;
  }
</style>
<script>
  function retryPayment(orderId, amount) {
    console.log("hi");

    fetch('/createOrder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            amount: amount    
        })
    })
    .then(response => response.json())
    .then(orderDetails => {
        if (orderDetails.success) {
            const options = {
                key: orderDetails.key_id,
                amount: orderDetails.amount,
                currency: "INR",
                name: "Your Store Name",
                description: "Retry Payment for Order",
                order_id: orderDetails.order_id,
                handler: function (response) {
                    fetch('/verifyPaymentAfterRetry', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                            orderId: orderId 
                        })
                    })
                    .then(res => res.json())
                    .then(verification => {
                        if (verification.success) {
                            Swal.fire({
                                title: 'Payment Successful!',
                                text: 'Your payment has been verified successfully.',
                                icon: 'success',
                                confirmButtonText: 'Go to Orders'
                            }).then(() => {
                                window.location.href = "/order";
                            });
                        } else {
                            Swal.fire({
                                title: 'Payment Verification Failed',
                                text: verification.message || 'Please contact support.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    });
                },
                prefill: {
                    name: "Customer Name",
                    email: "customer@example.com",
                    contact: "9999999999"
                },
                theme: {
                    color: "#3399cc"
                }
            };

            const rzp = new Razorpay(options);

            rzp.on('payment.failed', function (data) {
                console.error('Payment Failed:', data);
                fetch('/paymentFailed', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        payment_id: data.error.metadata.payment_id,
                        orderId: orderId
                    })
                });

                Swal.fire({
                    title: 'Payment Failed',
                    text: data.error.description || 'Your payment could not be processed. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            });

            rzp.open();
        } else {
            Swal.fire({
                title: 'Error',
                text: 'Failed to retrieve order details for retry.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error',
            text: 'Unable to fetch order details. Please try again later.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    });
}


</script>